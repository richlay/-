a <- 0
b <- 0
for (i in 1:4) {
indi_num[i] <- as.numeric(substr(guess, i, i))
if(indi_num[i]==random_four[i]){
a <- a+1
}else{
k <- grep(pattern = indi_num[i], random_four)
if(names(random_four[k])!="gg"){
if(k>0){
b <- b+1
names(random_four[k]) <- "gg"
}
}
}
}
if(random_four==indi_num){
print(paste("答對了，正確答案是 ", random_four, " 你玩了 ", playround, " 次"))
a <- T
}else{
print(paste(a,"A",b,"B"))
playround <- playround + 1
}
}
# generate random four nums
random_four <- sample(0:9, 4, replace = T, prob = NULL)
a <- F
playround <- 1
while (a==F) {
# player input four digit
guess <- as.numeric(readline(prompt = "請輸入四個數字"))
# get individual nums
indi_num <- c(1:4)
a <- 0
b <- 0
for (i in 1:4) {
indi_num[i] <- as.numeric(substr(guess, i, i))
if(indi_num[i]==random_four[i]){
a <- a+1
}else{
k <- grep(pattern = indi_num[i], random_four)
if(names(random_four[k])!="gg"){
if(k>0){
b <- b+1
names(random_four[k]) <- "gg"
}
}
}
}
if(random_four==indi_num){
print(paste("答對了，正確答案是 ", random_four, " 你玩了 ", playround, " 次"))
a <- T
}else{
print(paste(a,"A",b,"B"))
playround <- playround + 1
}
}
# 使用str()
str(iris)
guess <- readline(prompt = "Please enter four numbers. ")
guess
?guess
class(guess)
guess <- readline(prompt = "Please enter four numbers. ")
guess <- readline(prompt = "Please enter four numbers. ")
enter.correct <- legit(as.numeric(guess))
enter.correct <- as.numeric(guess)
guess <- readline(prompt = "Please enter four numbers. ")
enter.correct <- as.numeric(guess)
guess <- readline(prompt = "Please enter four numbers. ")
enter.correct <- as.numeric(guess)
enter.correct
enter.correct <- legit(as.numeric(guess))
guess <- readline(prompt = "Please enter four numbers. ")
enter.correct <- legit(as.numeric(guess))
fournums <- as.numeric(guess)
if (is.numeric(fournums)==F){
print("Please enter four NUMBERS!")
}
if (is.integer(fournums)==F){
print("Please enter four NUMBERS!")
}
guess <- readline(prompt = "Please enter four numbers. ")
fournums <- as.numeric(guess)
if (is.integer(fournums)==F){
print("Please enter four NUMBERS!")
}
# check if entered numbers are legit
legit <- function(fournums){
if (is.numeric(fournums)==F){
print("Please enter four NUMBERS!")
return(F)
}else if(length(fournums)>4){
print("Please enter FOUR numbers!")
return(F)
}else{
return(T)
}
}
# player input four digit
enter.correct <- F
while (enter.correct==F){
guess <- readline(prompt = "Please enter four numbers. ")
enter.correct <- legit(guess)
}
guess.num[1] <- as.integer(substr(guess, 1, 1))
class(guess.num[1])
# check if entered numbers are legit
legit <- function(fournums){
ascii <- c(10 ,10 , 10, 10)
for (r in 1:4) {
ascii[r] <- asc(substr(fournums,r, r))
ascii[r]
}
}
enter.correct <- legit(guess)
legit(guess)
# check if entered numbers are legit
legit <- function(fournums){
ascii <- c(10 ,10 , 10, 10)
for (r in 1:4) {
ascii[r] <- asc(substr(fournums,r, r))
ascii[r]
}
}
legit(guess)
install.packages("rJava")
install.packages("Rwordseg", repos="http://R-Forge.R-project.org")
install.packages("tm")
install.packages("tmcn", repos="http://R-Forge.R-project.org", type="source")
install.packages("wordcloud")
install.packages("XML")
install.packages("RCurl")
setwd("~/Documents/GitHub/Rlanguage/week_5/txt")
for (y in 91:107) {
speech[y] = readLines(paste(y, ".txt"))
}
for (y in 91:107) {
speech[y] = readLines(paste(as,character(y), ".txt"))
}
speech[y] = readLines(paste(as.character(y), ".txt"))
for (y in 91:107) {
cat(y)
}
cat(y," ")
for (y in 91:107) {
cat(y," ")
}
for (y in 91:107) {
speech[y] = readLines(paste(y, ".txt" , sep = ""))
}
speech
speech <- 0
for (y in 91:107) {
speech[y] = readLines(paste(y, ".txt" , sep = ""))
}
speech <- 9
for (y in 91:107) {
speech[y-90] = readLines(paste(y, ".txt" , sep = ""))
}
speech[1]
for (y in 91:107) {
speech[y-90] = readLines(paste(y, '.txt' , sep = ""))
}
warnings()
speech <- 9
for (y in 91:107) {
speech = readLines(paste(y, '.txt' , sep = ""))
}
speech
speech <- "aaa"
for (y in 91:107) {
speech = readLines(paste(y, '.txt' , sep = ""))
}
speech
speech = readLines("91.txt")
speech
speech = readLines("paste(91, '.txt' , sep = ""))
}
speech
d.corpus <- Corpus(DirSource("doc"), list(language = NA))
speech = readLines("paste(91, '.txt' , sep = ""))
}
speech
d.corpus <- Corpus(DirSource("doc"), list(language = NA))
speech = readLines("paste(91, '.txt' , sep = ""))
}
speech
d.corpus <- Corpus(DirSource("doc"), list(language = NA))
speech <- "aaa"
speech = readLines("paste(91, '.txt' , sep = ""))
}
speech
d.corpus <- Corpus(DirSource("doc"), list(language = NA))
speech = readLines(paste(91, '.txt' , sep = ""))
speech
speech <- "aaa"
for (y in 91:107) {
speech[y] = readLines(paste(y, '.txt' , sep = ""))
}
speech[91]
speech[92]
speech[1] <- "aaa"
speech <- 0
for (y in 91:107) {
speech[y] = readLines(paste(y, '.txt' , sep = ""))
}
speech[92]
speech <- 0
for (y in 91:107) {
i=y-90
speech[i] = readLines(paste(y, '.txt' , sep = ""))
}
speech[2]
for (y in 91:107) {
i=y-90
speech = readLines(paste(y, '.txt' , sep = ""))
}
speech
speech <- 0
for (y in 91:107) {
i=y-90
speech = readLines(paste(as.character(y), '.txt' , sep = ""))
}
speech
warnings()
setwd("C:/Users/user/Documents/GitHub/Rlanguage/week_4/hw")
setwd("C:/Users/user/Documents/GitHub/Rlanguage/week_4/hw")
setwd("~/Documents/GitHub/Rlanguage/week_4/hw")
lyrics = readLines("lyrics1.txt")
lyrics
speech <- 0
for (y in 91:107) {
i <- y
speech = readLines(paste(i, '.txt' , sep = ""))
}
setwd("~/Documents/GitHub/Rlanguage/week_5/txt")
speech <- 0
for (y in 91:107) {
i <- y
speech = readLines(paste(i, '.txt' , sep = ""))
}
speech
speech <- 0
for (y in 91:107) {
speech[y] = readLines(paste(y, '.txt' , sep = ""))
}
warnings()
speech = readLines('107.txt'))
speech = readLines('107.txt')
speech
speech = readLines('106.txt')
speech
for (y in 91:106) {
speech[y] = readLines(paste(y, '.txt' , sep = ""))
}
speech[106]
for (y in 91:106) {
speech[y, ] = readLines(paste(y, '.txt' , sep = ""))
}
speech[91, ]
speech <- 0
for (y in 91:106) {
speech[y, ] = readLines(paste(y, '.txt' , sep = ""))
}
for (y in 91:106) {
speech = readLines(paste(y, '.txt' , sep = ""))
}
speech
for (y in 91:106) {
paste(speech,"y",sep = "") = readLines(paste(y, '.txt' , sep = ""))
}
for (y in 91:106) {
speech[y][] = readLines(paste(y, '.txt' , sep = ""))
}
speech[93][]
install.packages("jiebaR")
speec <- readLines('106.txt')
speec
cutter <- worker()
library(jiebaR)
cutter <- worker()
cutter
cutter <= [speec]
cutter <- [speec]
cutter[speec]
for (y in 91:106) {
nam <- paste("speech", y, sep = "")
assign(nam, readLines(paste(y, '.txt' , sep = "")))
}
speech96
for (y in 91:107) {
nam <- paste("speech", y, sep = "")
assign(nam, readLines(paste(y, '.txt' , sep = "")))
}
library(jiebaR)
cutter[speech100]
library(jiebaR)
cutter[speech100]
cutter <- worker()
cutter[speech100]
worker(speech101)
dtm <- TermDocumentMatrix(docs)
library(Rwordseg)
install.packages(Rwordseg)
dtm <- TermDocumentMatrix(docs)
library("SnowballC")
library("wordcloud")
library("RColorBrewer")
library(tm)
library(tmcn)
library(Rwordseg)
library(jiebaR)
library("SnowballC")
library("wordcloud")
library("RColorBrewer")
for (y in 91:107) {
nam <- paste("speech", y, sep = "")
assign(nam, readLines(paste(y, '.txt' , sep = "")))
}
cutter <- worker()
cutter[speech100]
dtm <- TermDocumentMatrix(docs)
docs <- cutter[speech100]
dtm <- TermDocumentMatrix(docs)
m <- as.matrix(docs)
v <- sort(rowSums(m),decreasing=TRUE)
sort(table(cutter[docs]),decreasing = T)
stopwordsCN()
library(tm)
library(tmcn)
library(Rwordseg)
library(jiebaR)
library("SnowballC")
library("wordcloud")
library("RColorBrewer")
for (y in 91:107) {
nam <- paste("speech", y, sep = "")
assign(nam, readLines(paste(y, '.txt' , sep = "")))
}
cutter <- worker()
docs <- cutter[speech100]
docs <- tm_map(docs, stopwordsCN)
stopwordsCN()
library(tm)
library(tmcn)
library(Rwordseg)
library(jiebaR)
library("SnowballC")
library("wordcloud")
library("RColorBrewer")
for (y in 91:107) {
nam <- paste("speech", y, sep = "")
assign(nam, readLines(paste(y, '.txt' , sep = "")))
}
docs <- Corpus(VectorSource(speech100))
docs
docs <- tm_map(docs, removeWords, stopwordsCN())
dtm <- TermDocumentMatrix(docs)
m <- as.matrix(dtm)
v <- sort(rowSums(m),decreasing=TRUE)
d <- data.frame(word = names(v),freq=v)
head(d, 10)
docs <- Corpus(VectorSource(speech100))
docs <- tm_map(docs, removeWords, stopwordsCN())
dtm <- TermDocumentMatrix(docs)
m <- as.matrix(dtm)
v <- sort(rowSums(m),decreasing=TRUE)
d <- data.frame(word = names(v),freq=v)
head(d, 10)
library(tm)
library(tmcn)
library(Rwordseg)
library(jiebaR)
library("SnowballC")
library("wordcloud")
library("RColorBrewer")
for (y in 91:107) {
nam <- paste("speech", y, sep = "")
assign(nam, readLines(paste(y, '.txt' , sep = "")))
}
docs <- Corpus(VectorSource(speech100))
docs <- tm_map(docs, removeWords, stopwordsCN())
dtm <- TermDocumentMatrix(docs)
m <- as.matrix(dtm)
v <- sort(rowSums(m),decreasing=TRUE)
d <- data.frame(word = names(v),freq=v)
head(d, 10)
library(tm)
library(tmcn)
library(Rwordseg)
library(jiebaR)
library("SnowballC")
library("wordcloud")
library("RColorBrewer")
for (y in 91:107) {
nam <- paste("speech", y, sep = "")
assign(nam, readLines(paste(y, '.txt' , sep = "")))
}
docs <- Corpus(VectorSource(speech100))
# Eliminate extra white spaces
docs <- tm_map(docs, stripWhitespace)
# Text stemming
# docs <- tm_map(docs, stemDocument)
docs <- tm_map(docs, removeWords, stopwordsCN())
dtm <- TermDocumentMatrix(docs)
m <- as.matrix(dtm)
v <- sort(rowSums(m),decreasing=TRUE)
d <- data.frame(word = names(v),freq=v)
head(d, 10)
library(tm)
library(tmcn)
library(Rwordseg)
library(jiebaR)
library("SnowballC")
library("wordcloud")
library("RColorBrewer")
for (y in 91:107) {
nam <- paste("speech", y, sep = "")
assign(nam, readLines(paste(y, '.txt' , sep = "")))
}
docs <- Corpus(VectorSource(speech100))
docs <- tm_map(docs, removeWords, stopwordsCN())
# Eliminate extra white spaces
docs <- tm_map(docs, stripWhitespace)
# Text stemming
docs <- tm_map(docs, stemDocument)
dtm <- TermDocumentMatrix(docs)
m <- as.matrix(dtm)
v <- sort(rowSums(m),decreasing=TRUE)
d <- data.frame(word = names(v),freq=v)
head(d, 10)
library(tm)
library(tmcn)
library(Rwordseg)
library(jiebaR)
library("SnowballC")
library("wordcloud")
library("RColorBrewer")
for (y in 91:107) {
nam <- paste("speech", y, sep = "")
assign(nam, readLines(paste(y, '.txt' , sep = "")))
}
docs <- Corpus(VectorSource(speech100))
docs <- tmcn_map(docs, removeWords, stopwordsCN())
# Eliminate extra white spaces
docs <- tmcn_map(docs, stripWhitespace)
cutter <- worker(stop_word = stopwordsCN)
(
cutter <- worker(stop_word = stopwordsCN())
docs <- cutter[speech100]
stopwordsCN()
a <- stopwordsCN()
cutter <- worker(stop_word = a)
a
cutter <- worker(a, )
cutter <- worker(stop_word = a )
cutter <- worker(stop_word = stopwordsCN() )
docs <- cutter[speech100]
docs <- tm_map(docs, stopwordsCN)
cutter <- worker(stopwordsCN() )
docs <- cutter[speech100]
cutter <- worker()
docs <- cutter[speech100]
filter_segment（docs,stopwords）
filter_segment(docs,stopwords)
docs
docs <- filter_segment(docs,stopwords)
docs <- segment(docs, cutter)
docs <- filter_segment(docs,stopwords)
library(tm)
library(tmcn)
library(Rwordseg)
library(jiebaR)
library("SnowballC")
library("wordcloud")
library("RColorBrewer")
for (y in 91:107) {
nam <- paste("speech", y, sep = "")
assign(nam, readLines(paste(y, '.txt' , sep = "")))
}
cutter <- worker()
docs <- segment(docs, cutter)
docs <- segment(speech100, cutter)
docs <- filter_segment(docs,stopwords)
docs <- filter_segment(docs,stopwordsCN())
docs
sort(table(cutter[docs]),decreasing = T)
dtm <- TermDocumentMatrix(docs)
library(plyr)
install.packages("plyr")
library(plyr)
tableword <- count(docs)
tableword
library(stringr)#加载stringr包
docs<-gsub("[0-9]+?","",docs)###去除数字和英文
docs<-str_trim(docs)#去除空格
docs
sort(table(cutter[docs]),decreasing = T)
library(plyr)
tableword <- count(docs)
tableword
wordcloud(tableWord[,1],tableWord[,2],random.order=F,col= rainbow(length(wordFreq)))##参数应该能看懂吧
wordcloud(tableWord[,1],tableWord[,2],random.order=F,col= rainbow(length(docs)))##参数应该能看懂吧
tableword <- count(docs)
tableword
wordcloud(tableWord[,1],tableWord[,2],random.order=F,col= rainbow(length(docs)))##参数应该能看懂吧
wordcloud(tableword[,1],tableword[,2],random.order=F,col= rainbow(length(docs)))##参数应该能看懂吧
windowsFonts(myFont=windowsFont("Times New Roman")) ##使用华文彩云字体
wordcloud(tableWord[,1],tableWord[,2],random.order=F,col= rainbow(length(wordFreq)))
wordcloud(tableWord[,1],tableWord[,2],random.order=F,col= rainbow(length(freq(docs))))
wordcloud(tableWord[,1],tableWord[,2],random.order=F,col= rainbow(length(docs)))
